#!/usr/env/ python
# -*- encoding: utf-8 -*-

import os
from subprocess import Popen, PIPE
import shutil


#Abarca las pruebas info-004 y info-010

class Info_004():
    def __init__(self, dominio):
        
        self.salida = os.getcwd() + "/"
        self.complejidad = 1
        self.dominio = dominio
        self.name_file = "info_004_pscan.txt" #TODO:ACTUALIZAR EL IDENTIFICADOR DEL TEST 
        self.resultado = ""
        self.sinResultado = "No ha sido posible encontrar el archivo robots.txt en la raíz de la aplicación"
        self.recomendaciones = ""
        

 

    def port_scan(self,ip):
        self.resultado += "<br /><b>- Puertos, servicios y DNS detectados:</b><br />".rstrip('\n')
        os.system("sudo nmap -f --mtu 24 -A " + ip + " | grep open > " + self.salida+self.name_file)
        #time.sleep(10)
    
    def dns_lookup(self,domain):
        self.resultado += "<br /><b>- Servidores de nombre de dominio decubiertos:</b> <br />".rstrip('\n')
        stdout = Popen("host " + domain, shell=True, stdout=PIPE).stdout
        #time.sleep(10)
        output_tmp = stdout.read()
        output = output_tmp.decode('ascii')
        self.resultado+=output.rstrip('\n') + "<br />".rstrip('\n')

    
    def name_service(self,domain):
        self.resultado += "<br /><br /><b>- Name services detectados:</b> <br />".rstrip('\n')
        stdout = Popen("host -t ns " + domain , shell=True, stdout=PIPE).stdout
        #time.sleep(10)
        output_tmp = stdout.read()
        output = output_tmp.decode('ascii')
        self.resultado +=output.rstrip('\n') + "<br />".rstrip('\n')
    
    def read_file(self):
        with open (self.salida + self.name_file) as file:
            for line in file:
                self.resultado += line.rstrip('\n')  + "<br />".rstrip('\n') 

        file.close()
        self.delete_file()

    def delete_file(self):
         os.system("sudo rm " + self.salida + self.name_file) 

    def reporte(self, id):
        ruta = os.getcwd() + '/informacion/'
        archivo_origen = 'info_004.txt'
        archivo_resultado = 'reportes/info_004_'+str(id)+'.txt'


        
        shutil.copyfile(ruta + archivo_origen, ruta + archivo_resultado)
        with open(ruta + archivo_resultado, 'a') as file:
            
            file.write('\n' + self.resultado.replace('\n', '<br />'))
            file.write('\n' + self.recomendaciones + " ".replace('\n', '<br />'))
       
    def main(self, id ):
        print("================ Inicio prueba OTG-INFO-004 ==================\n")
  
        self.port_scan(self.dominio)
        self.read_file()
        self.dns_lookup(self.dominio)
        self.name_service(self.dominio)

        
        self.recomendaciones+=("<br />Se recomienda configurar un firewall que permita filtrar los paquetes enviados por aplicaciones "
                                    "especializadas en escanear puertos, esto con el fin de hacer inalcanzable el análisis de los "
                                    "puertos y frustrar al atacante<br />")
        
        self.reporte(id)
        print("================ Fin prueba OTG-INFO-004 ==================\n")

        


"""dominio = "scanme.nmap.org"  #TODO:DOMINIO E IP
ip = "45.33.32.156"
obj=info_004(ip)
obj.main()"""