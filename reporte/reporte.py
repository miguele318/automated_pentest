from arrow import utcnow
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, mm, cm
from reportlab.lib.pagesizes import A3, landscape
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer, Table, TableStyle
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT
from reportlab.lib.colors import black, purple, white
from reportlab.pdfgen import canvas
from os import remove
import os



# ======================= CLASE reportePDF =========================



class reportePDF(object):
    """Exportar una lista de diccionarios a una tabla en un
       archivo PDF."""
    
    def __init__(self, id, titulo, cabecera, nombrePDF, pruebas):
        super(reportePDF, self).__init__()

        self.titulo = titulo
        self.cabecera = cabecera
        self.id = id
        self.nombrePDF = nombrePDF
        self.pruebas = pruebas

        self.estilos = getSampleStyleSheet()

    @staticmethod
    def _encabezadoPiePagina(canvas, archivoPDF):
        """Guarde el estado de nuestro lienzo para que podamos aprovecharlo"""
        
        canvas.saveState()
        estilos = getSampleStyleSheet()

        alineacion = ParagraphStyle(name="alineacion", alignment=TA_RIGHT,
                                    parent=estilos["Normal"])
 
        # Encabezado
        encabezadoNombre = Paragraph("web_security_app", estilos["Normal"])
        anchura, altura = encabezadoNombre.wrap(archivoPDF.width, archivoPDF.topMargin)
        encabezadoNombre.drawOn(canvas, archivoPDF.leftMargin, 700)

        fecha = utcnow().to("local").format("dddd, DD - MMMM - YYYY", locale="es")
        fechaReporte = fecha.replace("-", "de")
        encabezadoFecha = Paragraph(fechaReporte, alineacion)
        anchura, altura = encabezadoFecha.wrap(archivoPDF.width, archivoPDF.topMargin )
        encabezadoFecha.drawOn(canvas, archivoPDF.leftMargin, 800)
 
        # Pie de página
        piePagina = Paragraph("Reporte generado por Web Security App.", estilos["Normal"])
        anchura, altura = piePagina.wrap(archivoPDF.height, archivoPDF.bottomMargin)
        piePagina.drawOn(canvas, archivoPDF.leftMargin, 15 * mm + (0.2 * inch))
 
        # Suelta el lienzo
        canvas.restoreState()





       
    def read_file(self):
        ruta = os.getcwd() + '/informacion/reportes/'
        archivo_resultado = '_'+str(self.id)+'.txt'
        

        resultados = []
        encabezado = ['ID', 'NOMBRE', 'TOPTEN', 'CATEGORIA',  'HERRAMIENTAS', 'RESULTADOS', 'RECOMENDACIONES']
        
        for prueba in self.pruebas:
            info = []
            resultado = {}
            with open (ruta + prueba + archivo_resultado) as file:
                for line in file:
                    info.append(line.split('\n')[0])
            file.close()
            remove(ruta + prueba + archivo_resultado)
            resultado = dict(zip(encabezado,info))
            resultados.append(resultado)

        return resultados

        












    def convertirDatos(self):
        """Convertir la lista de diccionarios a una lista de listas para crear
           la tabla PDF."""

        estiloEncabezado = ParagraphStyle(name="estiloEncabezado", alignment = TA_CENTER,
                                          fontSize=10, textColor=white,
                                          fontName="Helvetica-Bold",
                                          parent=self.estilos["Normal"])

        estiloNormal = self.estilos["Normal"]
        estiloNormal.alignment = TA_LEFT

        claves, nombres = zip(*[[k, n] for k, n in self.cabecera])

        encabezado = [Paragraph(nombre, estiloEncabezado) for nombre in nombres]
        nuevosDatos = [tuple(encabezado)]





        #TODO: AQUI LEO LOS DATOS
        datos = self.read_file()
            




        for dato in datos:
            nuevosDatos.append([Paragraph(str(dato[clave]), estiloNormal) for clave in claves])
            
        return nuevosDatos
        
    def Exportar(self):
        """Exportar los datos a un archivo PDF."""

        alineacionTitulo = ParagraphStyle(name="centrar", alignment=TA_CENTER, fontSize=13,
                                          leading=50, textColor=purple,
                                          parent=self.estilos["Heading1"])
        
        self.alto, self.ancho = A3
        

        convertirDatos = self.convertirDatos()
    
        tabla = Table(convertirDatos, colWidths=[3.50 * cm, 7 * cm, 2 * cm,
                               4* cm, 3.5 * cm, 9.5* cm, 9.5* cm], hAlign="CENTER")
        tabla.setStyle(TableStyle([
            ("BACKGROUND", (0, 0),(-1, 0), purple),
            ("ALIGN", (0, 0),(0, -1), "LEFT"),
            ("VALIGN", (0, 0), (-1, -1), "MIDDLE"), # Texto centrado y alineado a la izquierda
            ("INNERGRID", (0, 0), (-1, -1), 0.50, black), # Lineas internas
            ("BOX", (0, 0), (-1, -1), 0.25, black), # Linea (Marco) externa
            ]))

        historia = []
        historia.append(Paragraph(self.titulo, alineacionTitulo))
        historia.append(Spacer(1, 0.16 * inch))
        historia.append(tabla)

        archivoPDF = SimpleDocTemplate(self.nombrePDF, leftMargin=50, rightMargin=50, pagesize=landscape(A3),
                                       title="Reporte PDF", author="web_security_app")
        
        try:
            archivoPDF.build(historia, onFirstPage=self._encabezadoPiePagina,
                             onLaterPages=self._encabezadoPiePagina,
                             canvasmaker=numeracionPaginas)
            
         # +------------------------------------+
            return "Reporte generado con éxito."
         # +------------------------------------+
        except PermissionError:
         # +--------------------------------------------+  
            return "Error inesperado: Permiso denegado."
         # +--------------------------------------------+


# ================== CLASE numeracionPaginas =======================

class numeracionPaginas(canvas.Canvas):
    def __init__(self, *args, **kwargs):
        canvas.Canvas.__init__(self, *args, **kwargs)
        self._saved_page_states = []

    def showPage(self):
        self._saved_page_states.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        """Agregar información de la página a cada página (página x de y)"""
        numeroPaginas = len(self._saved_page_states)
        for state in self._saved_page_states:
            self.__dict__.update(state)
            self.draw_page_number(numeroPaginas)
            canvas.Canvas.showPage(self)
        canvas.Canvas.save(self)
 
    def draw_page_number(self, conteoPaginas):
        self.drawRightString(204 * mm, 15 * mm + (0.2 * inch),
                             "Página {} de {}".format(self._pageNumber, conteoPaginas))        


# ===================== FUNCIÓN generarReporte =====================

def generarReporte(id, pruebas):

    titulo = "Reporte Test de Penetración"

    cabecera =(
        ("ID","ID"),
        ("NOMBRE", "NOMBRE"),
        ("TOPTEN", "TOP TEN"),
        ("CATEGORIA", "CATEGORIA"),
        ("HERRAMIENTAS", "HERRAMIENTAS"),
        ("RESULTADOS", "RESULTADOS"),
        ("RECOMENDACIONES", "RECOMENDACIONES"),
        )

    nombrePDF = "report_"+str(id)+".pdf"

    reporte = reportePDF(id, titulo, cabecera, nombrePDF, pruebas).Exportar()
    print(reporte)


# ======================== LLAMAR FUNCIÓN ==========================

#generarReporte()