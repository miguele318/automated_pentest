#!/usr/bin/python3
# -*- encoding: utf-8 -*-

from abc import ABCMeta, abstractmethod
from modelo.pentest import Pentest
from modelo.riesgo_cualitativo import Riesgo_Cualitativo

class OTG(metaclass=ABCMeta):
    def __init__(self, dependencia, otg, riesgoNegocio=0.0):
        self.pentest = Pentest()
        self.dependencia = dependencia
        self.riesgoNegocio = riesgoNegocio
    
    @abstractmethod
    def main(self):
        raise NotImplementedError

    def obtenerResultado(self, otg, id_pentest):
        resultado = self.detalles.getResultado(otg, id_pentest)[0]
        resultado = resultado.split("\n")
        
        # Asegurar que no hayan líneas en blanco
        return [i for i in resultado if i != ""]
    

    
    def adicionarRecomendaciones(self, recomendaciones):
        self.detalles.recomendacion += recomendaciones + "\n"

    def adicionarRiesgo(self, riesgo):
        self.detalles.riesgo = riesgo
        self.adicionarRiesgoCualittivo(self.detalles.riesgo)
    
    def calcularRiesgo(self, otg, riesgoNegocio=0.0):
        probabilidad, impacTecnico = self.obtenerRiesgoP_I(otg)
        impactoGeneral = ( float(impacTecnico) + riesgoNegocio ) / 2
        riesgoGeneral = impactoGeneral * float(probabilidad)
        
        self.adicionarRiesgo(riesgoGeneral)
    
    def adicionarRiesgoCualittivo(self, riesgo):
        riesgoC = Riesgo_Cualitativo()
        if riesgo >= 0 and riesgo < 3:
            # BAJO
            riesgoC = riesgoC.getById(1)
        elif riesgo >= 3 and riesgo < 6:
            # MEDIO
            riesgoC = riesgoC.getById(2)
        elif riesgo >= 6 and riesgo < 9:
            # ALTO
            riesgoC = riesgoC.getById(3)
        elif riesgo >= 9:
            # CRÍTICO
            riesgoC = riesgoC.getById(4)

        self.detalles.id_riesgoc = riesgoC.id
    
    def adicionarResultado(self, res):
        self.detalles.resultado += res + "\n"
    
    def almacenarBD(self):
        self.detalles.insert(self.detalles)

